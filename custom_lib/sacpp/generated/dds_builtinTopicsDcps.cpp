//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: dds_builtinTopicsDcps.cpp
//  Source: sacpp/generated/dds_builtinTopicsDcps.idl
//  Generated: Wed Sep 12 10:38:10 2018
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************

#include "dds_builtinTopicsDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < DDS::SubscriptionBuiltinTopicData, struct SubscriptionBuiltinTopicDataSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < DDS::PublicationBuiltinTopicData, struct PublicationBuiltinTopicDataSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < DDS::TopicBuiltinTopicData, struct TopicBuiltinTopicDataSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < DDS::ParticipantBuiltinTopicData, struct ParticipantBuiltinTopicDataSeq_uniq_>;
#endif

const char * DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_local_id = "IDL:DDS/ParticipantBuiltinTopicDataTypeSupportInterface:1.0";

DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_duplicate (DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr DDS::ParticipantBuiltinTopicDataTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr result;
   result = dynamic_cast < DDS::ParticipantBuiltinTopicDataTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::ParticipantBuiltinTopicDataDataWriter::_local_id = "IDL:DDS/ParticipantBuiltinTopicDataDataWriter:1.0";

DDS::ParticipantBuiltinTopicDataDataWriter_ptr DDS::ParticipantBuiltinTopicDataDataWriter::_duplicate (DDS::ParticipantBuiltinTopicDataDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::ParticipantBuiltinTopicDataDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::ParticipantBuiltinTopicDataDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::ParticipantBuiltinTopicDataDataWriter_ptr DDS::ParticipantBuiltinTopicDataDataWriter::_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataDataWriter_ptr result = NULL;
   if (p && p->_is_a (DDS::ParticipantBuiltinTopicDataDataWriter::_local_id))
   {
      result = dynamic_cast < DDS::ParticipantBuiltinTopicDataDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::ParticipantBuiltinTopicDataDataWriter_ptr DDS::ParticipantBuiltinTopicDataDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataDataWriter_ptr result;
   result = dynamic_cast < DDS::ParticipantBuiltinTopicDataDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::ParticipantBuiltinTopicDataDataReader::_local_id = "IDL:DDS/ParticipantBuiltinTopicDataDataReader:1.0";

DDS::ParticipantBuiltinTopicDataDataReader_ptr DDS::ParticipantBuiltinTopicDataDataReader::_duplicate (DDS::ParticipantBuiltinTopicDataDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::ParticipantBuiltinTopicDataDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::ParticipantBuiltinTopicDataDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::ParticipantBuiltinTopicDataDataReader_ptr DDS::ParticipantBuiltinTopicDataDataReader::_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataDataReader_ptr result = NULL;
   if (p && p->_is_a (DDS::ParticipantBuiltinTopicDataDataReader::_local_id))
   {
      result = dynamic_cast < DDS::ParticipantBuiltinTopicDataDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::ParticipantBuiltinTopicDataDataReader_ptr DDS::ParticipantBuiltinTopicDataDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataDataReader_ptr result;
   result = dynamic_cast < DDS::ParticipantBuiltinTopicDataDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::ParticipantBuiltinTopicDataDataReaderView::_local_id = "IDL:DDS/ParticipantBuiltinTopicDataDataReaderView:1.0";

DDS::ParticipantBuiltinTopicDataDataReaderView_ptr DDS::ParticipantBuiltinTopicDataDataReaderView::_duplicate (DDS::ParticipantBuiltinTopicDataDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::ParticipantBuiltinTopicDataDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::ParticipantBuiltinTopicDataDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::ParticipantBuiltinTopicDataDataReaderView_ptr DDS::ParticipantBuiltinTopicDataDataReaderView::_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataDataReaderView_ptr result = NULL;
   if (p && p->_is_a (DDS::ParticipantBuiltinTopicDataDataReaderView::_local_id))
   {
      result = dynamic_cast < DDS::ParticipantBuiltinTopicDataDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::ParticipantBuiltinTopicDataDataReaderView_ptr DDS::ParticipantBuiltinTopicDataDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::ParticipantBuiltinTopicDataDataReaderView_ptr result;
   result = dynamic_cast < DDS::ParticipantBuiltinTopicDataDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::TopicBuiltinTopicDataTypeSupportInterface::_local_id = "IDL:DDS/TopicBuiltinTopicDataTypeSupportInterface:1.0";

DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr DDS::TopicBuiltinTopicDataTypeSupportInterface::_duplicate (DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::TopicBuiltinTopicDataTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::TopicBuiltinTopicDataTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr DDS::TopicBuiltinTopicDataTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (DDS::TopicBuiltinTopicDataTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr DDS::TopicBuiltinTopicDataTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr result;
   result = dynamic_cast < DDS::TopicBuiltinTopicDataTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::TopicBuiltinTopicDataDataWriter::_local_id = "IDL:DDS/TopicBuiltinTopicDataDataWriter:1.0";

DDS::TopicBuiltinTopicDataDataWriter_ptr DDS::TopicBuiltinTopicDataDataWriter::_duplicate (DDS::TopicBuiltinTopicDataDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::TopicBuiltinTopicDataDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::TopicBuiltinTopicDataDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::TopicBuiltinTopicDataDataWriter_ptr DDS::TopicBuiltinTopicDataDataWriter::_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataDataWriter_ptr result = NULL;
   if (p && p->_is_a (DDS::TopicBuiltinTopicDataDataWriter::_local_id))
   {
      result = dynamic_cast < DDS::TopicBuiltinTopicDataDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::TopicBuiltinTopicDataDataWriter_ptr DDS::TopicBuiltinTopicDataDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataDataWriter_ptr result;
   result = dynamic_cast < DDS::TopicBuiltinTopicDataDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::TopicBuiltinTopicDataDataReader::_local_id = "IDL:DDS/TopicBuiltinTopicDataDataReader:1.0";

DDS::TopicBuiltinTopicDataDataReader_ptr DDS::TopicBuiltinTopicDataDataReader::_duplicate (DDS::TopicBuiltinTopicDataDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::TopicBuiltinTopicDataDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::TopicBuiltinTopicDataDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::TopicBuiltinTopicDataDataReader_ptr DDS::TopicBuiltinTopicDataDataReader::_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataDataReader_ptr result = NULL;
   if (p && p->_is_a (DDS::TopicBuiltinTopicDataDataReader::_local_id))
   {
      result = dynamic_cast < DDS::TopicBuiltinTopicDataDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::TopicBuiltinTopicDataDataReader_ptr DDS::TopicBuiltinTopicDataDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataDataReader_ptr result;
   result = dynamic_cast < DDS::TopicBuiltinTopicDataDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::TopicBuiltinTopicDataDataReaderView::_local_id = "IDL:DDS/TopicBuiltinTopicDataDataReaderView:1.0";

DDS::TopicBuiltinTopicDataDataReaderView_ptr DDS::TopicBuiltinTopicDataDataReaderView::_duplicate (DDS::TopicBuiltinTopicDataDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::TopicBuiltinTopicDataDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::TopicBuiltinTopicDataDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::TopicBuiltinTopicDataDataReaderView_ptr DDS::TopicBuiltinTopicDataDataReaderView::_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataDataReaderView_ptr result = NULL;
   if (p && p->_is_a (DDS::TopicBuiltinTopicDataDataReaderView::_local_id))
   {
      result = dynamic_cast < DDS::TopicBuiltinTopicDataDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::TopicBuiltinTopicDataDataReaderView_ptr DDS::TopicBuiltinTopicDataDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::TopicBuiltinTopicDataDataReaderView_ptr result;
   result = dynamic_cast < DDS::TopicBuiltinTopicDataDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::PublicationBuiltinTopicDataTypeSupportInterface::_local_id = "IDL:DDS/PublicationBuiltinTopicDataTypeSupportInterface:1.0";

DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr DDS::PublicationBuiltinTopicDataTypeSupportInterface::_duplicate (DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::PublicationBuiltinTopicDataTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::PublicationBuiltinTopicDataTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr DDS::PublicationBuiltinTopicDataTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (DDS::PublicationBuiltinTopicDataTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr DDS::PublicationBuiltinTopicDataTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr result;
   result = dynamic_cast < DDS::PublicationBuiltinTopicDataTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::PublicationBuiltinTopicDataDataWriter::_local_id = "IDL:DDS/PublicationBuiltinTopicDataDataWriter:1.0";

DDS::PublicationBuiltinTopicDataDataWriter_ptr DDS::PublicationBuiltinTopicDataDataWriter::_duplicate (DDS::PublicationBuiltinTopicDataDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::PublicationBuiltinTopicDataDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::PublicationBuiltinTopicDataDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::PublicationBuiltinTopicDataDataWriter_ptr DDS::PublicationBuiltinTopicDataDataWriter::_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataDataWriter_ptr result = NULL;
   if (p && p->_is_a (DDS::PublicationBuiltinTopicDataDataWriter::_local_id))
   {
      result = dynamic_cast < DDS::PublicationBuiltinTopicDataDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::PublicationBuiltinTopicDataDataWriter_ptr DDS::PublicationBuiltinTopicDataDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataDataWriter_ptr result;
   result = dynamic_cast < DDS::PublicationBuiltinTopicDataDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::PublicationBuiltinTopicDataDataReader::_local_id = "IDL:DDS/PublicationBuiltinTopicDataDataReader:1.0";

DDS::PublicationBuiltinTopicDataDataReader_ptr DDS::PublicationBuiltinTopicDataDataReader::_duplicate (DDS::PublicationBuiltinTopicDataDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::PublicationBuiltinTopicDataDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::PublicationBuiltinTopicDataDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::PublicationBuiltinTopicDataDataReader_ptr DDS::PublicationBuiltinTopicDataDataReader::_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataDataReader_ptr result = NULL;
   if (p && p->_is_a (DDS::PublicationBuiltinTopicDataDataReader::_local_id))
   {
      result = dynamic_cast < DDS::PublicationBuiltinTopicDataDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::PublicationBuiltinTopicDataDataReader_ptr DDS::PublicationBuiltinTopicDataDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataDataReader_ptr result;
   result = dynamic_cast < DDS::PublicationBuiltinTopicDataDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::PublicationBuiltinTopicDataDataReaderView::_local_id = "IDL:DDS/PublicationBuiltinTopicDataDataReaderView:1.0";

DDS::PublicationBuiltinTopicDataDataReaderView_ptr DDS::PublicationBuiltinTopicDataDataReaderView::_duplicate (DDS::PublicationBuiltinTopicDataDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::PublicationBuiltinTopicDataDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::PublicationBuiltinTopicDataDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::PublicationBuiltinTopicDataDataReaderView_ptr DDS::PublicationBuiltinTopicDataDataReaderView::_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataDataReaderView_ptr result = NULL;
   if (p && p->_is_a (DDS::PublicationBuiltinTopicDataDataReaderView::_local_id))
   {
      result = dynamic_cast < DDS::PublicationBuiltinTopicDataDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::PublicationBuiltinTopicDataDataReaderView_ptr DDS::PublicationBuiltinTopicDataDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::PublicationBuiltinTopicDataDataReaderView_ptr result;
   result = dynamic_cast < DDS::PublicationBuiltinTopicDataDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_local_id = "IDL:DDS/SubscriptionBuiltinTopicDataTypeSupportInterface:1.0";

DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_duplicate (DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr DDS::SubscriptionBuiltinTopicDataTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr result;
   result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::SubscriptionBuiltinTopicDataDataWriter::_local_id = "IDL:DDS/SubscriptionBuiltinTopicDataDataWriter:1.0";

DDS::SubscriptionBuiltinTopicDataDataWriter_ptr DDS::SubscriptionBuiltinTopicDataDataWriter::_duplicate (DDS::SubscriptionBuiltinTopicDataDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::SubscriptionBuiltinTopicDataDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::SubscriptionBuiltinTopicDataDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::SubscriptionBuiltinTopicDataDataWriter_ptr DDS::SubscriptionBuiltinTopicDataDataWriter::_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataDataWriter_ptr result = NULL;
   if (p && p->_is_a (DDS::SubscriptionBuiltinTopicDataDataWriter::_local_id))
   {
      result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::SubscriptionBuiltinTopicDataDataWriter_ptr DDS::SubscriptionBuiltinTopicDataDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataDataWriter_ptr result;
   result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::SubscriptionBuiltinTopicDataDataReader::_local_id = "IDL:DDS/SubscriptionBuiltinTopicDataDataReader:1.0";

DDS::SubscriptionBuiltinTopicDataDataReader_ptr DDS::SubscriptionBuiltinTopicDataDataReader::_duplicate (DDS::SubscriptionBuiltinTopicDataDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::SubscriptionBuiltinTopicDataDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::SubscriptionBuiltinTopicDataDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::SubscriptionBuiltinTopicDataDataReader_ptr DDS::SubscriptionBuiltinTopicDataDataReader::_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataDataReader_ptr result = NULL;
   if (p && p->_is_a (DDS::SubscriptionBuiltinTopicDataDataReader::_local_id))
   {
      result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::SubscriptionBuiltinTopicDataDataReader_ptr DDS::SubscriptionBuiltinTopicDataDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataDataReader_ptr result;
   result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * DDS::SubscriptionBuiltinTopicDataDataReaderView::_local_id = "IDL:DDS/SubscriptionBuiltinTopicDataDataReaderView:1.0";

DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr DDS::SubscriptionBuiltinTopicDataDataReaderView::_duplicate (DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DDS::SubscriptionBuiltinTopicDataDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, DDS::SubscriptionBuiltinTopicDataDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr DDS::SubscriptionBuiltinTopicDataDataReaderView::_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr result = NULL;
   if (p && p->_is_a (DDS::SubscriptionBuiltinTopicDataDataReaderView::_local_id))
   {
      result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr DDS::SubscriptionBuiltinTopicDataDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr result;
   result = dynamic_cast < DDS::SubscriptionBuiltinTopicDataDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



